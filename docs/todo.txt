
integrate the new camera properly

install unity and play with it...

camera
    editor vs gameplay
        model for camera! perhaps .obj?
    maya-like - with the same move/pan controls
    focus on selected or center of world

switching states between editing and gameplay

GUI
    main menu bar
        show test window
    sort objects by id in scene explorer?

remove the concept of invalid() and just use default-constructed oids?

think about operation validity globally
    - editor mixin (and object) shouldn't be addable/removable/duplicatable
    - same for editor camera
    - also the editor object itself shouldn't be removable (also the editor camera)

editor:
    prefabs
        field/mixin annotations for being skipped from prefabs
        single object templates
        groups of object templates - group template
    save/load
    flags
        no_gizmo
    picking
        raycast
        rectangle selection
    IDs
    curve editing
    open questions
        force uniqueness of object names?
        if 2 objects (where one is the parent of the other) are modified with a gizmo at the same time - results differ from Maya
        when duplicating objects - only the top-most parents of the duplicated set remain selected - unlike maya
    postponed
        - highlighting currently filtered objects
        - disabling objects from scene
        - option to skip selection commands in the undo/redo stack (and also not show them - but they should be used!)
        - docking panels
        - multiple viewports with different perspectives
        - object transform snapping (also with gizmos)
        - optimization of GUI - don't submit primitives to imgui that will be clipped (f.e. need to scroll to them to see them)
        - copy/paste of objects/mixins
            useful if the user has played a bit through the level, then edited some values and wants to set them to the unplayed level
        - gizmos - rotation around pivot different from the object center
        - gizmos - local space (also supported by tiny-gizmo) - test it/think about it
        - editing an attribute of multiple objects at once
        - command script for editing the level - also exposing the editor hotkey functionality to the script - like "ungroup"
        - resource viewer - all resources with preview when appropriate and refcounts

start using c++17
    remove msvc14 option from python scripts
    <variant>
    <optional>
    structured bindings
    initializers in if statements
    template deduction of constructors
        allowing me to skip the types in <> for std::function for the recursive lambdas (which is bug-prone anyway!!!)
        allowing std::pair(5.0, false) instead of std::pair<double,bool>(5.0, false)

== bugs:
emscripten build crashes with latest emscripten???
CI - appveyor emscripten build fails for some reason
linux
    when built with the address sanitizer on linux - build crashes on startup in the plugin manager
editor
    imgui bindings - tab-ing from field to field doesn't submit commands in the undo/redo history
        https://github.com/ocornut/imgui/issues/1351
    things break when scaling objects not uniformly with parental relationships - kosta warned me about the transforms...
    >>SOMETIMES<< under >>LINUX<< an assert(doc.is_valid()) in editor::handle_command() for object_mutation_cmd gets triggered when undo-ing stuff...
        OMG HAPPENED UNDER EMSCRIPTEN TOO!

== questions:
ditch glfw in favor of sdl?
not having the entire simulation state in clients - to prevent cheating?
can the state between clients be really the same? indexes in resource managers and allocators and the like...?
move to RH coordinate system with Z+ up? Tuti put some good arguments forward - also the GLTF 2.0 format assumes right handed
object
    what should happen in the destructor?
        should children be deleted as well?
        should children be left alive and their transforms be adjusted?
figure out a coding standard
    underscores for in variables instead of camel case (+ camel case for types and functions)?
is the extensive use of lambdas ok? is such locality better than extracting the logic in a separate method/function further away?
    callstacks are bad - especially when using std::function (needed for recursion) and not just assigning the lambdas to auto
rename oid to object_handle?
make the oid class hold a pointer to the object instead of the index - but when being serialized it should turn into an index
remove unnecessary parts of source file names - for example the "messages_" prefix of files in the "messages" folder...
    ===> might get clashes for the generated .h.inl files in <gen> !!!
engine name: RPGE - rapid prototyping game engine - the RPG engine

== to test:
- aabb class
- transform stuffs
- newly added functions in utils? ...

== build system:
to think about:
    - link to third parties dynamically when possible
    - shared precompiled headers for plugins...?
    - make a stripped config - no plugins, disabled doctest, no asserts, no *_tests.cpp files
        - and even a more stripped config - no editor, no imgui binding routines (remove from codegen and from messages), etc.
    - emscripten and release configs - LTO + the stripped config
    - be able to build everything in release except for gameplay code (debug iterators?)
    - faster vcvarsall.bat - just setup the paths on my own - http://www.randygaul.net/2016/06/03/faster-vcvars32-bat/
    - ninja instead of msbuild - see this: https://blogs.msdn.microsoft.com/vcblog/2017/08/14/cmake-support-in-visual-studio-customizing-your-environment/
    - unity builds
    - optimizations for STL and others even in debug builds... #pragma GCC push_options #pragma GCC optimize("O2") ...
questionable:
    - test all headers option for build system (that makes a dummy cpp for each header and just includes it to see if headers are stand-alone) - https://github.com/ldionne/dyno/blob/master/cmake/TestHeaders.cmake

== plugin hot swap system:
- hit 1 button and have the game rebuild and reload what is necessary while debugger is attached
- optional on demand reloading - instead of automatic polling
- background compiler process
- catching SEH exceptions and crashes - and temporarily stop calling the 'update' method of objects of that type
- undo system - by keeping a copy of a last working .dll version of a plugin (one which hasn't crashed during it's update())
- look at Live++ when it is released - http://molecular-matters.com/products_livepp.html

== codegen:
- type parser
    - support for nested types
    - support for types in namespaces
    - inheritance
    - fields as C arrays
    - templated types
    - error checking
- sub-field handling - "t.pos" instead of just "t" - this will allow for using imgui bindings for composite types
- hashing - use hash_append from github (not ported to MSVC yet) - or roll my own...
- problems with the oid collection
    - possibly slow - should investigate some compile time programming with traits and constexpr if... perhaps...
    - currently calling the changed callbacks is skipped
    - also trouble with keys of maps - perhaps some callback that does this: https://stackoverflow.com/a/44883472/3162383
    - make it more general?...

== coding standard:
- all custom types should begin with a capital letter!
- prefix with _ all function arguments?
- always call messages with :: prefix if they are in the global scope - to not accidentally call something else
- get into the habit of declaring every constructor explicit - https://akrzemi1.wordpress.com/2015/10/22/more-than-you-need/
- prefer explicit casts (for example !! is bad - do a static_cast<bool>)
- use the keywords form <ciso646>
- don't call any messages in ctors/dtors
- prefer accepting references/pointers to objects in functions that will use the object anyway instead of object ids - to avoid unnecessary id-to-object lookups
- make a linter rule against "!" - better make the expression explicit! or use "not"
- use the prefix increment operators instead of postfix - http://www.viva64.com/en/b/0093/
- http://llvm.org/docs/CodingStandards.html
- https://github.com/lefticus/cppbestpractices
- cpp core guidelines
- CppCon 2016: Jason Turner â€œPractical Performance Practices" - https://www.youtube.com/watch?v=uzF4u9KgUWI

== future performance optimizations:
the oid class can skip doing lookups with its integer by holding a pointer to the object directly

== tools:
- valgrind
- sanitizers
- cppcheck
    - https://github.com/VioletGiraffe/cppcheck-vs-addin
- flint
- clang-modernize
- clang-tidy
    - https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/
    - CodeChecker is a static analysis infrastructure built on the LLVM/Clang Static Analyzer toolchain, replacing scan-build
- MSVC static analyzer - and the Core Guidelines Checkers
- struct_layout - tool to show the structure layout of types in your C/C++ program - https://github.com/arvidn/struct_layout
- clang-format
    - https://github.com/kbenzie/git-cmake-format
    - IncludeCategories for clang-format and headers!!!
    - also SortIncludes
- rabbitvcs - TortoiseGit for linux - http://rabbitvcs.org/

== libraries:
general:
    https://github.com/Microsoft/GSL
    https://github.com/nholthaus/units
math:
    https://github.com/herumi/fmath
scripting:
    - checkout this before going anywhere: https://github.com/r-lyeh/scriptorium
    - https://github.com/pkulchenko/ZeroBraneStudio
UI:
    - librocket
    - turbobadger
    - imgui
        https://github.com/aoterodelaroza/imgui-goodies
        https://github.com/Flix01/imgui
        https://github.com/ScottMudge/imgui_tabs
    - nuklear
physics:
    - bullet
    box2d
    https://github.com/kroitor/gjk.c
    https://github.com/slembcke/Chipmunk2D
    https://github.com/InteractiveComputerGraphics/PositionBasedDynamics
compression:
    - zlib - the big beast
    - miniz - tiny zlib implementation
    - fastlz - fast compression lib
    - zstd
    - lz4 - https://github.com/lz4/lz4
crypto:
    - https://github.com/jedisct1/libsodium
threading:
    https://github.com/seanmiddleditch/jobxx
logging:
    - https://github.com/onqtam?page=1&tab=stars&utf8=%E2%9C%93&q=log
video:
    - ogg theora
    - theora play - theora nice API (http://icculus.org/theoraplay/)
    - https://github.com/libav/libav
artificial intelligence:
    https://github.com/miccol/Behavior-Tree
audio:
    - openal
        https://github.com/kcat/openal-soft
    - fmod
    - ogg vorbis - patent-free audio codec (oggvorbisfile - library with nice API) - https://github.com/soundcloud/vorbis
    - speex - patent-free format for voip - https://github.com/stoiczek/speex
    https://github.com/onqtam?page=1&tab=stars&utf8=%E2%9C%93&q=audio
networking:
    - enet - https://github.com/lsalzman/enet
    - raknet
    - zmq
    - nanomsk - https://github.com/nanomsg/nanomsg
    - asio
    https://github.com/networkprotocol/reliable.io
    https://github.com/networkprotocol/netcode.io
    https://github.com/networkprotocol/yojimbo
    https://github.com/HumbleNet/HumbleNet
graphics/assets:
    - https://github.com/ands/lightmapper
    - https://github.com/tlorach/Bak3d
    - Animation Compression Library - https://github.com/nfrechette/acl
    - inverse kinematics - https://github.com/TheComet93/ik
    - https://github.com/mp3butcher/Cal3D/
    - https://github.com/nem0/OpenFBX
    - https://github.com/guillaumeblanc/ozz-animation
    - https://github.com/libgdx/fbx-conv
    - https://github.com/friggog/tree-gen
    - https://github.com/ux3d/2gltf2
    - maya/max collada plugins - https://github.com/KhronosGroup/OpenCOLLADA
    - mesh manipulation utils - https://github.com/Forceflow/trimesh2
    - tree generation - https://github.com/jarikomppa/proctree
    - debugging
        https://github.com/msqrt/shader-printf
    - texture stuff
        - https://github.com/paulvortex/RwgTex
        - https://github.com/onqtam?page=1&tab=stars&utf8=%E2%9C%93&q=texture
        - https://community.imgtec.com/developers/powervr/tools/pvrtextool/
        photoshop psd files - http://molecular-matters.com/products_psd_extract.html
        photoshop psd files - http://molecular-matters.com/products_psd_sdk.html
strings/localization:
    https://github.com/david-grs/inplace_string
    https://github.com/sheredom/utf8.h
    https://github.com/minimaxir/big-list-of-naughty-strings
profiler:
    - the one from chobo
    - http://aras-p.info/blog/2017/01/23/Chrome-Tracing-as-Profiler-Frontend/
    - https://github.com/catapult-project/catapult
    - https://github.com/seanmiddleditch/yardstick
miscellaneous:
    GUID/UUID
        https://github.com/r-lyeh/sole
        https://github.com/boostorg/uuid
        https://github.com/graeme-hill/crossguid
    - preprocessor stuffs - https://github.com/kobalicek/ppmagic
    https://github.com/mattiasgustavsson/libs
    - google breakpad - to send crash report from a remote system
    - sqlite - light sql using normal files
    - small random number generator:
        http://burtleburtle.net/bob/rand/smallprng.html
        https://github.com/imneme/pcg-cpp
    - physicsFS - virtual fs (forget about the physics in the name) for accessing files from multiple zipz and easier asset management
    - bitfields
        - http://preshing.com/20150324/safe-bitfields-in-cpp/
        - https://github.com/grisumbras/enum-flags
        - https://www.justsoftwaresolutions.co.uk/cplusplus/using-enum-classes-as-bitfields.html
    - signals and slots
        - https://aboutcpp.wordpress.com/2015/01/16/an-update-on-a-simple-signal-system/
        - http://ideone.com/x02YXi
debugging:
    a C/C++ memory profiler and memory leak finder for Windows, PS4, PS3 - https://github.com/milostosic/MTuner
    Small collection of debug-related drop-in c/c++-utils - https://github.com/wc-duck/dbgtools
    just my code option in VS - https://msdn.microsoft.com/en-us/library/dn457346.aspx#C++
    just my code option in VS - https://docs.microsoft.com/en-us/visualstudio/debugger/just-my-code#BKMK_C___Just_My_Code
middleware:
    http://molecular-matters.com/
    coherent

== code review:
- https://www.reviewboard.org/
- phabricator

== automation:
- https://www.ansible.com/
- http://buildbot.net/
- http://gruntjs.com/
- https://jenkins.io/

== advanced/networking/monitoring/servers:
- a gateway service that provides dynamic routing, monitoring, resiliency, security, and more - https://github.com/Netflix/zuul
- netdata is a system for distributed real-time performance and health monitoring - https://github.com/firehol/netdata
- A beautiful web dashboard for Linux - https://github.com/afaqurk/linux-dash
- an HTTP benchmarking tool - https://github.com/wg/wrk

== random notes:
- if emscripten problem with unregistered mixins comes up again:
    //if(_dynamix_get_mixin_type_info((MIXIN_TYPE*)nullptr).id == dynamix::INVALID_MIXIN_ID)
    //    dynamix::internal::domain::safe_instance().register_mixin_type<MIXIN_TYPE>(
    //            _dynamix_get_mixin_type_info((MIXIN_TYPE*)nullptr));
- how to get a mixin id from a mixin name
    // dynamix::mixin_id selected_mixin_id =
    //             dynamix::internal::domain::instance().get_mixin_id_by_name("selected");

== dynamix:
wanted:
    - reworked allocators - mainly the ability to know for which object the mixin is being allocated for
    - add has/get methods to object class that work with C strings (and mixin_id) and not just template parameters
    - add ability to check if object implements a bunch of messages: #define interface team_msg & name_msg & hp_msg
    - expose part (name and mixin id) of the structure returned by _dynamix_get_mixin_type_info() outside of internal (also func)
optimization:
    - currently sizeof(dynamix::object) == 4 * sizeof(void*) - if default message impls are dropped it can become 2 pointers
    - object::get_mixin_names() - do a .reserve() before the push_back-s
    - moving stuff like this back into the header so it can get inlined with optimizations:
        https://github.com/iboB/dynamix/blob/4fa52dda8205680dfa90c671674f980bbf492e16/src/mixin_collection.cpp#L30
        or maybe just when my project is big enough - move lots of dynamix stuff into the headers and profile...
        even checking if a mixin is implemented has no chance of getting inlined! :(
    - forward declaring messages - for better link times - or maybe not - might lead to slower messages
hygiene:
    - prefix everything after _dynamix_internal: with "internal"

== dynamix:
deg_to_rad - breaks when an int is passed (passing "60" results in "0" instead of 1.xxx radians)